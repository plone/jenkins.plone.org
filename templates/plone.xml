<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  {% if options.get('displayName', 'False') != 'False' %}
  <displayName>${options.get('displayName')}</displayName>
  {% end %}
  <logRotator>
    <daysToKeep>${options.get('daysToKeep', '')}</daysToKeep>
    <numToKeep>${options.get('numToKeep', '10')}</numToKeep>
    <artifactDaysToKeep>${options.get('artifactDaysToKeep', '')}</artifactDaysToKeep>
    <artifactNumToKeep>${options.get('artifactNumToKeep', '3')}</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    {% if options.get('notification_endpoint', 'False') == 'True' %}
    <!-- NOTIFICATION ENDPOINT -->
    <com.tikal.hudson.plugins.notification.HudsonNotificationProperty plugin="notification@1.4">
      <endpoints>
        <com.tikal.hudson.plugins.notification.Endpoint>
          <protocol>HTTP</protocol>
          <url>http://localhost</url>
        </com.tikal.hudson.plugins.notification.Endpoint>
      </endpoints>
    </com.tikal.hudson.plugins.notification.HudsonNotificationProperty>
    {% end %}
    {% if options.get('plone_core', 'False') != 'False' %}
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>plonechanges</name>
          <description/>
          <defaultValue>http://jenkins.plone.org/roboto/static/changeset/noset</defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repo</name>
          <description/>
          <defaultValue>no repo</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    {% end %}
  </properties>
  <scm class="hudson.plugins.git.GitSCM">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name></name>
        <refspec></refspec>
        <url>${options['git_url']}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${options['git_branch']}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <useShallowClone>false</useShallowClone>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>false</skipTag>
    <includedRegions></includedRegions>
    <scmName></scmName>
  </scm>
  {% if options.get('node', False) != False %}
  <assignedNode>${options.get('node', '')}</assignedNode>
  {% end %}
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>${options.get('concurrentBuild', 'false')}</concurrentBuild>

  <!-- BUILDERS -->
  <builders>
    {% if options.get('plone_core', 'False') != 'False' %}
    <hudson.tasks.Shell>
      <command>echo "Save to CHANGES.log"
wget ${options['dollar']}plonechanges -O CHANGES.log
      </command>
    </hudson.tasks.Shell>
    {% end %}
    {% if options.get('plone_core_package', 'False') != 'False' %}
    <hudson.tasks.Shell>
      <command>
# bootstrap.py
wget http://downloads.buildout.org/1/bootstrap.py
# jenkins.cfg
echo "[buildout]" >> jenkins.cfg
echo "extends = https://raw.github.com/plone/buildout.jenkins/master/plone-4.3-core-package.cfg" >> jenkins.cfg
echo "jenkins-test-eggs = ${options['jobname']} [test]" >> jenkins.cfg
echo "[versions]" >> jenkins.cfg
echo "${options['jobname']} = " >> jenkins.cfg
echo "" >> jenkins.cfg
      </command>
    </hudson.tasks.Shell>
    {% end %}
    <hudson.tasks.Shell>
      <command>
${options['python']} bootstrap.py -c ${options['buildout_cfg']}
bin/buildout -c ${options['buildout_cfg']}
bin/${options['buildout_run']}
{% if options['code_analysis'] == 'True' %}bin/jenkins-code-analysis{% end %}
{% if options['test_coverage'] == 'True' %}bin/jenkins-test-coverage{% end %}
      </command>
    </hudson.tasks.Shell>
    {% if options.get('plone_core', 'False') != 'False' %}
    <hudson.tasks.Shell>
      <command>i=`ls src`
echo "[sources]" &gt;snapshoot.cfg
for j in ${options['dollar']}i;
    do
        cd src/${options['dollar']}j;
        h=`git log -n1 --pretty=oneline | cut -d " " -f 1`
        a=`git remote show origin | grep Fetch | cut -c 14-`
        if [[ ${options['dollar']}a =~ "buildout.coredev.git" ]] ; then  echo "SVN ${options['dollar']}a"; else   echo "${options['dollar']}j = git ${options['dollar']}a rev=${options['dollar']}h" &gt;&gt; ../../snapshoot.cfg; fi
        cd ../..; done</command>
    </hudson.tasks.Shell>
    {% end %}

  </builders>

  <!-- PUBLISHERS -->
  <publishers>
    <!-- TEST REPORT -->
    {% if options.get('test_report', 'False') != 'False' %}
    <hudson.tasks.junit.JUnitResultArchiver>
      <testResults>parts/jenkins-test/testreports/*.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers/>
    </hudson.tasks.junit.JUnitResultArchiver>
    {% end %}

    {% if options.get('test_coverage', 'False') != 'False' %}
    <!-- TEST COVERAGE -->
    <hudson.plugins.cobertura.CoberturaPublisher>
      <coberturaReportFile>parts/jenkins-test/coverage.xml</coberturaReportFile>
      <onlyStable>true</onlyStable>
      <failUnhealthy>false</failUnhealthy>
      <failUnstable>false</failUnstable>
      <autoUpdateHealth>false</autoUpdateHealth>
      <autoUpdateStability>false</autoUpdateStability>
      <healthyTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>7000000</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>8000000</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>8000000</int>
          </entry>
        </targets>
      </healthyTarget>
      <unhealthyTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
        </targets>
      </unhealthyTarget>
      <failingTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
        </targets>
      </failingTarget>
      <sourceEncoding>ASCII</sourceEncoding>
    </hudson.plugins.cobertura.CoberturaPublisher>
    {% end %}

    {% if options.get('artifacts', 'False') != 'False' %}
    <hudson.tasks.ArtifactArchiver>
      <artifacts>${options['artifacts']}</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>true</allowEmptyArchive>
    </hudson.tasks.ArtifactArchiver>
    {% end %}

    {% if options.get('email_notification', 'False') != 'False' %}
    <!-- EMAIL NOTIFICATION -->
    <hudson.plugins.emailext.ExtendedEmailPublisher>
      <recipientList>${options['email_notification_recipients']}</recipientList>
      <configuredTriggers>
        <!-- Regression -->
        <hudson.plugins.emailext.plugins.trigger.RegressionTrigger>
          <email>
            <recipientList>${options['email_notification_recipients']}</recipientList>
            <subject>${options['dollar']}PROJECT_NAME - Build # ${options['dollar']}BUILD_NUMBER - Regression! - ${options['dollar']}{TEST_COUNTS, var=&quot;fail&quot;} failure(s)</subject>
            <body>${options['dollar']}PROJECT_DEFAULT_CONTENT</body>
            <sendToDevelopers>false</sendToDevelopers>
            <sendToRequester>false</sendToRequester>
            <includeCulprits>false</includeCulprits>
            <sendToRecipientList>true</sendToRecipientList>
            <attachmentsPattern>CHANGES.log</attachmentsPattern>
            <attachBuildLog>true</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo></replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.RegressionTrigger>
        <!-- Still Failing -->
        <hudson.plugins.emailext.plugins.trigger.StillFailingTrigger>
          <email>
            <recipientList>${options['email_notification_recipients']}</recipientList>
            <subject>${options['dollar']}PROJECT_NAME - Build # ${options['dollar']}BUILD_NUMBER - Still failing! - ${options['dollar']}{TEST_COUNTS, var=&quot;fail&quot;} failure(s)</subject>
            <body>${options['dollar']}PROJECT_DEFAULT_CONTENT</body>
            <sendToDevelopers>false</sendToDevelopers>
            <sendToRequester>false</sendToRequester>
            <includeCulprits>false</includeCulprits>
            <sendToRecipientList>true</sendToRecipientList>
            <attachmentsPattern>CHANGES.log</attachmentsPattern>
            <attachBuildLog>true</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo></replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.StillFailingTrigger>
        <!-- Improvement -->
        <hudson.plugins.emailext.plugins.trigger.ImprovementTrigger>
          <email>
            <recipientList>${options['email_notification_recipients']}</recipientList>
            <subject>${options['dollar']}PROJECT_NAME - Build # ${options['dollar']}BUILD_NUMBER - Improvement! - ${options['dollar']}{TEST_COUNTS, var="fail"} failure(s)</subject>
            <body>${options['dollar']}PROJECT_DEFAULT_CONTENT</body>
            <sendToDevelopers>false</sendToDevelopers>
            <sendToRequester>false</sendToRequester>
            <includeCulprits>false</includeCulprits>
            <sendToRecipientList>true</sendToRecipientList>
            <attachmentsPattern>CHANGES.log</attachmentsPattern>
            <attachBuildLog>true</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo></replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.ImprovementTrigger>
        <!-- Fixed -->
        <hudson.plugins.emailext.plugins.trigger.FixedTrigger>
          <email>
            <recipientList>${options['email_notification_recipients']}</recipientList>
            <subject>${options['dollar']}PROJECT_NAME - Build # ${options['dollar']}BUILD_NUMBER - Fixed! - 0 failure(s)</subject>
            <body>${options['dollar']}PROJECT_DEFAULT_CONTENT</body>
            <sendToDevelopers>false</sendToDevelopers>
            <sendToRequester>false</sendToRequester>
            <includeCulprits>false</includeCulprits>
            <sendToRecipientList>true</sendToRecipientList>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FixedTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>${options['dollar']}DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>${options['dollar']}DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript></presendScript>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    {% end %}

    {% if options.get('plone_core', 'False') != 'False' %}
    <org.jenkinsci.plugins.custom__history.SaveHistory plugin="CustomHistory@1.6">
      <fname>CHANGES.log</fname>
      <exitOnFail>false</exitOnFail>
    </org.jenkinsci.plugins.custom__history.SaveHistory>
    {% end %}

    {% if options['robot_report'] == 'True' %}
    <!-- ROBOT REPORT -->
    <hudson.plugins.robot.RobotPublisher plugin="robot@1.2.3">
      <outputPath>parts/jenkins-test</outputPath>
      <reportFileName>robot_report.html</reportFileName>
      <logFileName>robot_log.html</logFileName>
      <outputFileName>robot_output.xml</outputFileName>
      <passThreshold>100.0</passThreshold>
      <unstableThreshold>80.0</unstableThreshold>
      <logFileLink>robot_report.html#total_all</logFileLink>
      <otherFiles>
        <string>robot_*.png</string>
      </otherFiles>
      <onlyCritical>true</onlyCritical>
    </hudson.plugins.robot.RobotPublisher>
    {% end %}
    {% if options['code_analysis'] == 'True' %}
    <!-- CODE ANALYSIS -->
    <hudson.plugins.tasks.TasksPublisher>
      <healthy></healthy>
      <unHealthy></unHealthy>
      <thresholdLimit>low</thresholdLimit>
      <pluginName>[TASKS] </pluginName>
      <defaultEncoding></defaultEncoding>
      <canRunOnFailed>false</canRunOnFailed>
      <useDeltaValues>false</useDeltaValues>
      <thresholds>
        <unstableTotalAll></unstableTotalAll>
        <unstableTotalHigh></unstableTotalHigh>
        <unstableTotalNormal></unstableTotalNormal>
        <unstableTotalLow></unstableTotalLow>
        <failedTotalAll></failedTotalAll>
        <failedTotalHigh></failedTotalHigh>
        <failedTotalNormal></failedTotalNormal>
        <failedTotalLow></failedTotalLow>
      </thresholds>
      <shouldDetectModules>false</shouldDetectModules>
      <dontComputeNew>true</dontComputeNew>
      <doNotResolveRelativePaths>false</doNotResolveRelativePaths>
      <high></high>
      <normal>XXX, BBB, TODO</normal>
      <low>failUnlessEqual, assertEquals, failIfEqual, failUnless, assert_, failIf, failUnlessRaises, failUnlessAlmostEqual, failIfAlmostEqual</low>
      <ignoreCase>false</ignoreCase>
      <pattern>packages/**/*</pattern>
      <excludePattern>packages/**/*.png, packages/**/*.gif,  packages/**/*.jpg, packages/**/*.zip, packages/**/*.ppt, packages/**/*.jar,   packages/**/*.stx, packages/**/CHANGES.txt, packages/**/HISTORY.txt, packages/**/INSTALL.txt, packages/**/*.rst, packages/**/CHANGELOG.txt, packages/**/ChangeLog, packages/unittest2, packages/**/*.pyc,packages/**/*.pyo</excludePattern>
    </hudson.plugins.tasks.TasksPublisher>
    <hudson.plugins.analysis.collector.AnalysisPublisher>
      <healthy></healthy>
      <unHealthy></unHealthy>
      <thresholdLimit>low</thresholdLimit>
      <pluginName>[ANALYSIS-COLLECTOR] </pluginName>
      <defaultEncoding></defaultEncoding>
      <canRunOnFailed>false</canRunOnFailed>
      <useDeltaValues>false</useDeltaValues>
      <thresholds>
        <unstableTotalAll></unstableTotalAll>
        <unstableTotalHigh></unstableTotalHigh>
        <unstableTotalNormal></unstableTotalNormal>
        <unstableTotalLow></unstableTotalLow>
        <failedTotalAll></failedTotalAll>
        <failedTotalHigh></failedTotalHigh>
        <failedTotalNormal></failedTotalNormal>
        <failedTotalLow></failedTotalLow>
      </thresholds>
      <shouldDetectModules>false</shouldDetectModules>
      <dontComputeNew>true</dontComputeNew>
      <doNotResolveRelativePaths>false</doNotResolveRelativePaths>
      <isCheckStyleDeactivated>true</isCheckStyleDeactivated>
      <isDryDeactivated>true</isDryDeactivated>
      <isFindBugsDeactivated>true</isFindBugsDeactivated>
      <isPmdDeactivated>true</isPmdDeactivated>
      <isOpenTasksDeactivated>false</isOpenTasksDeactivated>
      <isWarningsDeactivated>false</isWarningsDeactivated>
    </hudson.plugins.analysis.collector.AnalysisPublisher>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>parts/jenkins-test/*.log</artifacts>
      <latestOnly>false</latestOnly>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.violations.ViolationsPublisher>
      <config>
        <suppressions class="tree-set">
          <no-comparator/>
        </suppressions>
        <typeConfigs>
          <no-comparator/>
          <entry>
            <string>checkstyle</string>
            <hudson.plugins.violations.TypeConfig>
              <type>checkstyle</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>codenarc</string>
            <hudson.plugins.violations.TypeConfig>
              <type>codenarc</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>cpd</string>
            <hudson.plugins.violations.TypeConfig>
              <type>cpd</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>cpplint</string>
            <hudson.plugins.violations.TypeConfig>
              <type>cpplint</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>csslint</string>
            <hudson.plugins.violations.TypeConfig>
              <type>csslint</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern>parts/jenkins-test/xml-csslint/**/*.xml</pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>findbugs</string>
            <hudson.plugins.violations.TypeConfig>
              <type>findbugs</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>fxcop</string>
            <hudson.plugins.violations.TypeConfig>
              <type>fxcop</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>gendarme</string>
            <hudson.plugins.violations.TypeConfig>
              <type>gendarme</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>jcreport</string>
            <hudson.plugins.violations.TypeConfig>
              <type>jcreport</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>jslint</string>
            <hudson.plugins.violations.TypeConfig>
              <type>jslint</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern>parts/jenkins-test/xml-jshint/**/*.xml</pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>pep8</string>
            <hudson.plugins.violations.TypeConfig>
              <type>pep8</type>
              <min>${options.get('pep8_min', 10)}</min>
              <max>${options.get('pep8_max', 999)}</max>
              <unstable>${options.get('pep8_unstable', 999)}</unstable>
              <usePattern>false</usePattern>
              <pattern>parts/jenkins-test/flake8.log</pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>pmd</string>
            <hudson.plugins.violations.TypeConfig>
              <type>pmd</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>pylint</string>
            <hudson.plugins.violations.TypeConfig>
              <type>pylint</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>simian</string>
            <hudson.plugins.violations.TypeConfig>
              <type>simian</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
          <entry>
            <string>stylecop</string>
            <hudson.plugins.violations.TypeConfig>
              <type>stylecop</type>
              <min>10</min>
              <max>999</max>
              <unstable>999</unstable>
              <usePattern>false</usePattern>
              <pattern></pattern>
            </hudson.plugins.violations.TypeConfig>
          </entry>
        </typeConfigs>
        <limit>100</limit>
        <sourcePathPattern></sourcePathPattern>
        <fauxProjectPath></fauxProjectPath>
        <encoding>default</encoding>
      </config>
    </hudson.plugins.violations.ViolationsPublisher>
    {% end %}

    {% if options.get('build_trigger', 'False') != 'False' %}
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.20">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.NodeParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>CHANGES=${options['dollar']}CHANGES</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>${options['build_trigger']}</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>true</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    {% end %}
  </publishers>

  <buildWrappers>
    <!-- Cleanup Workspace -->
    <hudson.plugins.ws__cleanup.PreBuildCleanup>
      <deleteDirs>true</deleteDirs>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <!-- Timeout -->
    {% if options.get('build_timeout', 'False') != 'False' %}
     <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.12.2">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>${options['build_timeout']}</timeoutMinutes>
      </strategy>
      <failBuild>false</failBuild>
      <writingDescription>false</writingDescription>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    {% end %}
    <!-- ZSERVER Port Allocation -->
    <org.jvnet.hudson.plugins.port__allocator.PortAllocator plugin="port-allocator@1.5">
      <ports>
        <org.jvnet.hudson.plugins.port__allocator.DefaultPortType>
          <name>ZSERVER_PORT</name>
        </org.jvnet.hudson.plugins.port__allocator.DefaultPortType>
        <org.jvnet.hudson.plugins.port__allocator.DefaultPortType>
          <name>FTPSERVER_PORT</name>
        </org.jvnet.hudson.plugins.port__allocator.DefaultPortType>
      </ports>
    </org.jvnet.hudson.plugins.port__allocator.PortAllocator>
    <!-- Robot XVFB -->
    {% if options.get('robot_report', 'False') != 'False' %}
    <org.jenkinsci.plugins.xvfb.XvfbBuildWrapper plugin="xvfb@1.0.7">
      <installationName>default</installationName>
      <screen>1024x768x24</screen>
      <debug>false</debug>
      <timeout>0</timeout>
      <displayNameOffset>1</displayNameOffset>
      <additionalOptions></additionalOptions>
      <shutdownWithBuild>false</shutdownWithBuild>
    </org.jenkinsci.plugins.xvfb.XvfbBuildWrapper>
    {% end %}
  </buildWrappers>

</project>
